using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : MonoBehaviour
{
    // Singleton instance
    public static GameManager instance;

    // Variables to track player lives and keys
    public int playerLives = 3;
    public int playerKeys = 0;

    // Variables to track the number of enemies and powerups
    public int numberOfEnemies;
    public int numberOfPowerups;

    // Enemy prefab
    public GameObject enemyPrefab;

    // Array of enemy positions
    public Vector2[] enemyPositions;

    void Awake()
    {
        // Ensure there's only one instance of GameManager
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject); // Keep the GameManager across scenes
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
    {
        // Read difficulty settings from DifficultyManager
        if (DifficultyManager.instance != null)
        {
            playerLives = DifficultyManager.instance.playerLives;
            playerKeys = DifficultyManager.instance.playerKeys;
            numberOfEnemies = DifficultyManager.instance.numberOfEnemies;
            numberOfPowerups = DifficultyManager.instance.numberOfPowerups;

            // Initialize enemy positions array
            InitializeEnemyPositions();

            // Spawn enemies based on difficulty settings
            SpawnEnemies();
        }
    }

    void InitializeEnemyPositions()
    {
        enemyPositions = new Vector2[]
        {
            new Vector2(10, 0),
            new Vector2(12, 2),
            new Vector2(20, 0),
            new Vector2(22, 2),
            new Vector2(24, 0),
            new Vector2(26, 2),
            new Vector2(28, 0),
            new Vector2(30, 2),
            new Vector2(32, 0),
            new Vector2(34, 2)
        };
    }

    void SpawnEnemies()
    {
        for (int i = 0; i < numberOfEnemies && i < enemyPositions.Length; i++)
        {
            Instantiate(enemyPrefab, new Vector3(enemyPositions[i].x, enemyPositions[i].y, 0), Quaternion.identity);
        }
    }

    // Method to add a life
    public void AddLife()
    {
        playerLives++;
    }

    // Method to remove a life
    public void RemoveLife()
    {
        if (playerLives > 0)
        {
            playerLives--;
            if (playerLives == 0)
            {
                SceneManager.LoadScene("gameOver2");
            }
        }
    }

    public int ShowLife()
    {
        return playerLives;
    }

    // Method to add a key
    public void AddKey()
    {
        playerKeys++;
    }

    // Method to remove a key
    public void RemoveKey()
    {
        if (playerKeys > 0)
        {
            playerKeys--;
        }
    }

    // Method called when player lives reach 0
    void GameOver()
    {
        Debug.Log("Game Over!");
        // Implement game over logic here (e.g., restart level, show game over screen)
    }
}
